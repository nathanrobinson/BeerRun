import XCTest
import SpriteKit
@testable import BeerRun

/// Manual validation test to verify Enemy Creation implementation works correctly
/// This test can be run to manually verify the key behaviors are working
class EnemyCreationManualValidationTest: XCTestCase {
    
    func test_FullEnemyImplementationIntegration() {
        print("üß™ Running manual validation of Enemy Creation implementation...")
        
        // Create a game scene
        let scene = GameScene(size: CGSize(width: 1920, height: 1080))
        scene.didMove(to: SKView())
        
        // Verify enemies were created
        let enemies = scene.children.compactMap { $0 as? Enemy }
        XCTAssertGreaterThan(enemies.count, 0, "‚ùå No enemies found in scene")
        print("‚úÖ Found \(enemies.count) enemies in scene")
        
        // Verify player exists
        guard let player = scene.childNode(withName: "player") as? PlayerController else {
            XCTFail("‚ùå Player not found")
            return
        }
        print("‚úÖ Player found in scene")
        
        // Verify enemy types
        let policeEnemies = enemies.filter { $0.enemyType == .police }
        let churchEnemies = enemies.filter { $0.enemyType == .churchMember }
        
        XCTAssertGreaterThan(policeEnemies.count + churchEnemies.count, 0, "‚ùå No typed enemies found")
        print("‚úÖ Found \(policeEnemies.count) police and \(churchEnemies.count) church member enemies")
        
        // Test enemy movement patterns
        if let policeEnemy = policeEnemies.first {
            XCTAssertEqual(policeEnemy.movementType, .towardPlayer, "‚ùå Police should move toward player")
            print("‚úÖ Police enemy has correct movement type (toward player)")
        }
        
        if let churchEnemy = churchEnemies.first {
            XCTAssertEqual(churchEnemy.movementType, .acrossPath, "‚ùå Church member should move across path")
            print("‚úÖ Church member enemy has correct movement type (across path)")
        }
        
        // Test enemy physics setup
        for enemy in enemies {
            XCTAssertNotNil(enemy.physicsBody, "‚ùå Enemy missing physics body")
            XCTAssertEqual(enemy.physicsBody?.categoryBitMask, PhysicsCategory.enemy, "‚ùå Enemy has wrong physics category")
            XCTAssertFalse(enemy.physicsBody?.isDynamic ?? true, "‚ùå Enemy should not be dynamic")
        }
        print("‚úÖ All enemies have correct physics setup")
        
        // Test enemy movement simulation
        guard let testEnemy = enemies.first else {
            XCTFail("‚ùå No enemy to test movement")
            return
        }
        
        let initialPosition = testEnemy.position
        
        // Simulate movement updates
        for _ in 0..<30 {
            testEnemy.updateMovement(playerPosition: player.position)
        }
        
        // Enemy should have moved (unless it was already at the boundary)
        let moved = testEnemy.position != initialPosition
        print(moved ? "‚úÖ Enemy movement working" : "‚ö†Ô∏è Enemy didn't move (may be at boundary)")
        
        // Test enemy defeat mechanism
        testEnemy.handleJumpDefeat()
        XCTAssertTrue(testEnemy.isDefeated, "‚ùå Enemy defeat mechanism not working")
        print("‚úÖ Enemy defeat mechanism working")
        
        // Test player enemy collision penalties
        let initialSpeed = player.currentMovementSpeed
        player.handleEnemyCollision(penaltyMultiplier: 0.5)
        XCTAssertTrue(player.isCurrentlyPenalized, "‚ùå Player penalty system not working")
        XCTAssertLessThan(player.currentMovementSpeed, initialSpeed, "‚ùå Player speed not reduced after enemy collision")
        print("‚úÖ Enemy collision penalty system working")
        
        // Test player enemy jump defeat
        player.handleEnemyJumpDefeat(bounceVelocity: 300)
        XCTAssertGreaterThan(player.physicsBody?.velocity.dy ?? 0, 0, "‚ùå Player bounce after enemy defeat not working")
        print("‚úÖ Player bounce after enemy defeat working")
        
        print("üéâ Manual validation completed successfully!")
        print("üìã All User Story 7 acceptance criteria verified:")
        print("   ‚úÖ Enemies added as SKSpriteNode objects")
        print("   ‚úÖ Enemies move towards or across player's path")
        print("   ‚úÖ Player can jump on enemies to defeat them")
        print("   ‚úÖ Enemy collision triggers penalty")
        print("   ‚úÖ All logic implemented in Swift using SpriteKit")
    }
    
    func test_EnemyPhysicsIntegration() {
        print("üî¨ Testing physics integration...")
        
        let scene = GameScene(size: CGSize(width: 1920, height: 1080))
        scene.didMove(to: SKView())
        
        let enemies = scene.children.compactMap { $0 as? Enemy }
        XCTAssertGreaterThan(enemies.count, 0, "Need enemies to test physics")
        
        // Verify physics categories are correctly set up
        let physicsCategories = Set(enemies.compactMap { $0.physicsBody?.categoryBitMask })
        XCTAssertTrue(physicsCategories.contains(PhysicsCategory.enemy), "‚ùå Enemy physics category not set correctly")
        
        // Verify contact test bitmasks
        let contactBitmasks = Set(enemies.compactMap { $0.physicsBody?.contactTestBitMask })
        XCTAssertTrue(contactBitmasks.allSatisfy { $0 & PhysicsCategory.player != 0 }, "‚ùå Enemies should test contact with player")
        
        print("‚úÖ Physics integration verified")
    }
    
    func test_EnemySpawningVariety() {
        print("üé≤ Testing enemy spawning variety...")
        
        let scene = GameScene(size: CGSize(width: 1920, height: 1080))
        scene.didMove(to: SKView())
        
        let enemies = scene.children.compactMap { $0 as? Enemy }
        let positions = enemies.map { $0.position.x }
        let uniquePositions = Set(positions)
        
        XCTAssertGreaterThan(uniquePositions.count, 1, "‚ùå Enemies should have varied positions")
        
        let types = Set(enemies.map { $0.enemyType })
        if types.count > 1 {
            print("‚úÖ Multiple enemy types spawned: \(types)")
        } else {
            print("‚ö†Ô∏è Only one enemy type found (this may be expected)")
        }
        
        print("‚úÖ Enemy spawning variety verified")
    }
}